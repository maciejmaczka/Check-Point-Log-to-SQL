/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package checkpointlog_sql;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JFileChooser;
import java.io.IOException;
import java.io.File;  
import java.io.BufferedReader;
import java.io.FileReader;
import java.sql.Time;
import java.text.SimpleDateFormat;
import java.util.Date;
import sun.swing.SwingUtilities2;
/**
 *
 * @author Maciej
 */
public class Main_Window extends javax.swing.JFrame {

    /**
     * Creates new form Main_Window
     */
    
    public String value_db_name = "";
    public String value_db_ip_address = "";
    public String value_db_table = "";
    public String value_db_username ="";
    public String value_db_password = "";
    String db_connection_string = "";
    public String value_file_name = "";
    public File[] value_files_to_load = null;
    Connection sql_con;
    
    SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
    
    public Main_Window() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        db_ip_address = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        db_name = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        db_username = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        db_password = new javax.swing.JPasswordField();
        jLabel5 = new javax.swing.JLabel();
        db_table = new javax.swing.JTextField();
        db_test_connection = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        log_area = new javax.swing.JTextArea();
        file_select = new javax.swing.JButton();
        file_load = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menu_item_about = new javax.swing.JMenuItem();
        menu_item_exit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("main window"); // NOI18N

        jLabel1.setText("DB Address:");

        db_ip_address.setText("192.168.10.202");

        jLabel3.setText("Database: ");

        db_name.setText("cpk_log");

        jLabel2.setText("Username:");

        db_username.setText("cpk");

        jLabel4.setText("Password:");

        db_password.setText("cpk");

        jLabel5.setText("Table:");

        db_table.setText("ckp_fw_log");

        db_test_connection.setText("Test Connection");
        db_test_connection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                db_test_connectionActionPerformed(evt);
            }
        });

        log_area.setColumns(20);
        log_area.setRows(5);
        jScrollPane1.setViewportView(log_area);

        file_select.setText("Select File");
        file_select.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_selectActionPerformed(evt);
            }
        });

        file_load.setText("Load");
        file_load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                file_loadActionPerformed(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        menu_item_about.setText("About");
        jMenu1.add(menu_item_about);

        menu_item_exit.setText("Exit");
        jMenu1.add(menu_item_exit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(db_ip_address, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(file_select, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(file_load, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(db_name, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(db_table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(db_username, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(db_password, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(db_test_connection)
                                .addGap(0, 10, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(252, 252, 252))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(db_ip_address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(db_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(db_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(db_password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(db_table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(db_test_connection))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(file_select)
                    .addComponent(file_load)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(284, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void load_db_params()
    {
        
        value_db_name = db_name.getText();
        value_db_ip_address = db_ip_address.getText();
        value_db_table = db_table.getText();
        value_db_username = db_username.getText();
        value_db_password = new String(db_password.getPassword());
        
        
        
    }
    
    
    
    
    private void db_test_connectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_db_test_connectionActionPerformed
       
        load_db_params();
        
        
        try
        {
            
       //  public String url = "jdbc:postgresql://localhost:5432/testdb";
    
            db_connection_string =  "jdbc:postgresql://" + value_db_ip_address + ":5432/" + value_db_name;
            
            sql_con = DriverManager.getConnection(db_connection_string, value_db_username, "cpk");
            
            
             PreparedStatement pst = sql_con.prepareStatement("select * from " + value_db_table  + " limit 1 ");
             ResultSet rs = pst.executeQuery();
            
             log_area.append("DB Test OK \n" );
            
        }
        catch (Exception e)
        {
            
            log_area.append("Error: " + e.getLocalizedMessage() + "\n" );
            
        }
                
                    
      
        
        
        
    }//GEN-LAST:event_db_test_connectionActionPerformed

    private void file_selectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_selectActionPerformed
      
        
        JFileChooser select_file_window = new JFileChooser();
        select_file_window.setFileSelectionMode(JFileChooser.FILES_ONLY);
        select_file_window.setMultiSelectionEnabled(true);
        
        int returnVal = select_file_window.showOpenDialog(jLabel1);
         
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
        
           value_files_to_load  = select_file_window.getSelectedFiles();
           
           for ( int i = 0 ; i < value_files_to_load.length ; i++)
           {
           
              log_area.append("Selected File: " + value_files_to_load[i].getAbsolutePath() + "\n");
              
           }
           
           
        }
        
        
        
    }//GEN-LAST:event_file_selectActionPerformed

    public void proccess_log_line(String log_line)
    {
      
        String sql_insert =  " INSERT INTO ckp_fw_log(    " 
        + " num, date, \"time\", orig, type, action, alert, \"i/f_name\", \"i/f_dir\", product, logid, contextnum, origin_id, contentversion, hll_key, sequencenum, " 
        + "log_sys_message, productfamily, sys_message, description, status, version, comment, update_service, db_ver, subs_exp, \"Update Status\", severity, fw_message, "
        + "inzone, outzone, service_id, icmp, src, dst, proto, \"ICMP Type\", \"ICMP Code\", up_match_table_match_id, up_match_table_layer_uuid, up_match_table_layer_name, "
        + "up_match_table_rule_uid, up_match_table_rule_name, up_action_table_action, up_parent_id_table_parent_rule, service, s_port, information, blade_name, log_id, "
        + "short_desc, long_desc, scan_hosts_hour, scan_hosts_day, scan_hosts_week, unique_detected_hour, unique_detected_day, unique_detected_week, scan_mail, rule, srckeyid, "
        + "dstkeyid, \"encryption failure\", \"peer gateway\", scheme, methods, reject_category, fw_subproduct, vpn_feature_name, message, rule_guid, hit, policy, "
        + "first_hit_time, last_hit_time, ike, cookiei, cookier, msgid, \"IKE notification\", \"Certificate DN\", \"IKE IDs\", \"user\", partner, community,"
        + " context_num, protocol, sig_id, start_time, segment_time, elapsed, packets, bytes, client_inbound_packets, client_outbound_packets, server_inbound_packets, "
        + "server_outbound_packets, client_inbound_bytes, client_outbound_bytes, server_inbound_bytes, server_outbound_bytes, client_inbound_interface, "
        + "client_outbound_interface, server_inbound_interface, server_outbound_interface, duration, update_count, creation_time, connection_count, aggregated_log_count, "
        + "up_match_2_app_table_match_id, up_match_2_app_table_app_id, up_primary_app_table_primary_app, up_app_table_id, up_app_table_name, up_app_table_app_desc, "
        + "up_app_table_category, up_app_table_matched_category, up_app_table_properties, up_app_table_risk, up_app_table_sig_id, rule_uid, rule_name, appi_name, app_desc,"
        + " app_id, app_category, matched_category, app_properties, app_risk, app_rule_id, app_rule_name, web_client_type, web_server_type, app_sig_id, ticket_id,"
        + " usercheck_incident_uid, reason, modbus_unit_id, modbus_function_code, modbus_function_description, modbus_start_address, modbus_end_address, modbus_quantity,"
        + " proxy_src_ip, stormagentname, stormagentaction, sensor_test_name, sensor_alert_title, sensor_alert_category, sensor_alert_message, sensor_alert_module, "
        + "sensor_alert_type, sensor_alert_source, sensor_alert_id, sensor_alert_solution, sensor_alert_solution_sk, sensor_alert_blade, sensor_alert_duration, xlatesrc, "
        + "xlatedst, nat_rulenum, nat_addtnl_rulenum, xlatedport, xlatesport, resource_table_resource, resource_table_method, failure_impact, up_urlf_table_id,"
        + " up_urlf_table_name, up_urlf_table_app_desc, up_urlf_table_category, up_urlf_table_matched_category, up_urlf_table_properties, up_urlf_table_risk, "
        + "up_urlf_table_sig_id, sent_bytes, received_bytes, browse_time, \"Suppressed logs\", contract_name, subscription_stat, subscription_stat_desc, next_update_desc, "
        + "client_type_os, needs_browse_time, \"Protection Name\", \"Confidence Level\", protection_id, \"SmartDefense Profile\", \"Performance Impact\", \"Industry Reference\","
        + " \"Protection Type\", \"Update Version\", \"Attack Info\", attack, capture_uuid, policy_time, session_id, source_os, dst_country, malware_rule_id, malware_rule_name,"
        + " resource, reject_id_kid, ser_agent_kid, server_kid, tp_match_table_layer_uuid, tp_match_table_layer_name, tp_match_table_malware_rule_id, "
        + "tp_match_table_malware_rule_name, \"TP_match_table_SmartDefense profile\", \"Protection ID\", \"Description URL\", packet_capture_unique_id, packet_capture_time, "
        + "packet_capture_name, \"Total logs\", event_name, cu_rule_category, cu_rule_id, is_correlated, num_of_updates, is_last, event_start_time, cu_detection_time,"
        + " time_interval, max_num_count_detected, cu_log_count, cu_detected_by, domain, origin_repetitions, event_end_time, cu_last_update_time, administrator, "
        + "users_repetitions, machine, source_repetitions, \"Additional Info\", objectname, \"Last Rematch Time\", \"TCP packet out of state\", tcp_flags) " 
	

        
        try
        {
            String lines[] = log_line.split(";",-1);
            System.out.println("saaaa" + lines.length);  // 243 razy
            
            
            for (int i = 0 ; i < lines.length   ; i++)
            {
                System.out.print(i + " " + lines[i] + "\n");
                
                if ((lines[i].length() == 0) || ((i == 5) && lines[i].length() < 2))
                {
                    
                    
                    
                    sql_insert = sql_insert.replaceFirst( "-\\?-", "null");
                    
                }
                else
                {
 
                    if (lines[i].length() > 1000)
                    {
                        
                        lines[i] = lines[i].substring(0,1000);
                        
                    }
                                        
                    sql_insert = sql_insert.replaceFirst( "-\\?-",  "'" +lines[i].replaceAll("'", "''") +"'");
                
                }
                
            }
            System.out.println(sql_insert.substring(0));
          System.out.println(sql_insert.substring(1000));
         System.out.println(sql_insert.substring(2000));
          System.out.println(sql_insert.substring(3000));
          
          
            sql_insert = sql_insert.replaceAll("-\\?-", "null");
            PreparedStatement ps = sql_con.prepareStatement(sql_insert);
            ps.execute();
        
    //        PreparedStatement pstmt = conn.prepareStatement(INSERT_RECORD);
  //  pstmt.setString(1, "1");
  //  pstmt.setString(2, "name1");
 //   pstmt.addBatch();
    
  //  pstmt.setString(1, "2");
  //  pstmt.setString(2, "name2");
 //   pstmt.addBatch();
          //nt[] updateCounts = pstmt.executeBatch();
            
            
        }catch (Exception e)
        {
            System.out.println("Error: " + e.getLocalizedMessage());
          //  log_area.append("Error: " + e.getLocalizedMessage());
        System.exit(0);
        }
        
        
     
        
        
        
    }
    
    
    private void load_file(File file_to_load)
    {
       
        try 
        {
            
            log_area.append("Reading file: " + file_to_load.getAbsolutePath() + "\n");
            
            BufferedReader br = new BufferedReader(new FileReader(file_to_load));
            String line;

            int counter = 0;
            br.readLine();
            while ((line = br.readLine()) != null) 
            {

               // System.out.println(line);

                
                if (counter%5000 == 0)
                {
                    
                    log_area.append("Processed logs: " + counter + "\n");
                    
                }
                
                proccess_log_line(line);
                counter++;
                
            }

            log_area.append("Finished! Processed logs: " + counter + "\n");
            log_area.append("Closing file: " + file_to_load.getAbsolutePath() + "\n");
        
        } catch (Exception e)
        {

            log_area.append("Error: " + e.getLocalizedMessage() + "\n");

        }
        
    }
    
    
    
    private void file_loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_file_loadActionPerformed
       
        try
        {
        
            for (int i = 0 ; i < value_files_to_load.length ; i++)
            {
            
                load_file(value_files_to_load[i]);
            
            }
        
        } catch (Exception e)
        {
            
            log_area.append("Error: No file selected \n" );
            
        }
        
        
        
        
    }//GEN-LAST:event_file_loadActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
        try
        {
            SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
             String dateInString = "7-02-2013";
             
                      Date date = formatter.parse(dateInString);
            System.out.println(date);
            System.out.println(formatter.format(date));   
   
        }
        catch (Exception e)
        {
            
            System.out.print("eeee" + e.getLocalizedMessage());
        }
       
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main_Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main_Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextField db_ip_address;
    public javax.swing.JTextField db_name;
    public javax.swing.JPasswordField db_password;
    public javax.swing.JTextField db_table;
    private javax.swing.JButton db_test_connection;
    public javax.swing.JTextField db_username;
    private javax.swing.JButton file_load;
    private javax.swing.JButton file_select;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea log_area;
    private javax.swing.JMenuItem menu_item_about;
    private javax.swing.JMenuItem menu_item_exit;
    // End of variables declaration//GEN-END:variables
}
